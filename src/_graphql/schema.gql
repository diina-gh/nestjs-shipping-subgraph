# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

directive @key(fields: String!, resolvable: Boolean = true) repeatable on OBJECT | INTERFACE

directive @extends on OBJECT | INTERFACE

directive @external on OBJECT | FIELD_DEFINITION

directive @requires(fields: String!) on FIELD_DEFINITION

directive @provides(fields: String!) on FIELD_DEFINITION

directive @shareable on FIELD_DEFINITION | OBJECT

directive @link(url: String!, import: [link__Import]) on SCHEMA

directive @tag(name: String!) repeatable on FIELD_DEFINITION | OBJECT | INTERFACE | UNION | ARGUMENT_DEFINITION | SCALAR | ENUM | ENUM_VALUE | INPUT_OBJECT | INPUT_FIELD_DEFINITION

directive @inaccessible on FIELD_DEFINITION | OBJECT | INTERFACE | UNION | ARGUMENT_DEFINITION | SCALAR | ENUM | ENUM_VALUE | INPUT_OBJECT | INPUT_FIELD_DEFINITION

directive @override(from: String!) on FIELD_DEFINITION

type Deliveryman {
  id: ID!
  name: String!
  desc: String!
  activated: Boolean!
  createdAt: DateTime!
  updatedAt: DateTime!
  civility: String!
  firstname: String!
  lastname: String!
  email: String!
  phone: String!
  shipments: [Shipment!]!
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

type Stage {
  id: ID!
  name: String!
  desc: String!
  activated: Boolean!
  createdAt: DateTime!
  updatedAt: DateTime!
  nextStageId: Float!
  nextStage: Stage!
  previous: Stage!
  shipments: [Shipment!]!
}

type Order {
  id: ID!
  shipment: Shipment
}

type Shipment {
  id: ID!
  name: String!
  desc: String!
  activated: Boolean!
  createdAt: DateTime!
  updatedAt: DateTime!
  date: DateTime!
  details: String!
  orderId: Float!
  order: Order!
  stageId: Float!
  stage: Stage!
  deliverymanId: Float!
  deliveryman: Deliveryman!
  user: Order!
}

type Query {
  shipment(id: Float!): ShipmentResult!
  shipments(shipmentArgs: ShipmentArgs!): PaginatedShipmentResult!
  deliveryman(id: Float!): DeliverymanResult!
  deliverymans(deliverymanArgs: DeliverymanArgs!): PaginatedDeliverymanResult!
  stage(id: Float!): StageResult!
  stages(stageArgs: StageArgs!): PaginatedStageResult!
}

union ShipmentResult = Shipment | InputError | ServerError

type InputError {
  message: String!
  input: String
  exception: String
}

type ServerError {
  message: String!
  exception: String
}

union PaginatedShipmentResult = PaginatedShipment | InputError | ServerError

type PaginatedShipment {
  count: Int!
  hasNext: Boolean!
  shipments: [Shipment!]!
}

input ShipmentArgs {
  page: Int = 1
  take: Int = 10
  filter: ShipmentFilterArgs
  orderBy: ShipmentOrderArgs
}

input ShipmentFilterArgs {
  id: Float
  activated: Boolean
  search: SearchrArgs
}

input SearchrArgs {
  searchQuery: String
  searchBy: [String!]
}

input ShipmentOrderArgs {
  id: Sort
  name: Sort
  desc: Sort
  createdAt: Sort
  updatedAt: Sort
}

"""Define attribute to order from."""
enum Sort {
  ASC
  DESC
}

union DeliverymanResult = Deliveryman | InputError | ServerError

union PaginatedDeliverymanResult = PaginatedDeliveryman | InputError | ServerError

type PaginatedDeliveryman {
  count: Int!
  hasNext: Boolean!
  deliverymans: [Deliveryman!]!
}

input DeliverymanArgs {
  page: Int = 1
  take: Int = 10
  filter: DeliverymanFilterArgs
  orderBy: DeliverymanOrderArgs
}

input DeliverymanFilterArgs {
  id: Float
  activated: Boolean
  search: SearchrArgs
}

input DeliverymanOrderArgs {
  id: Sort
  name: Sort
  desc: Sort
  createdAt: Sort
  updatedAt: Sort
}

union StageResult = Stage | InputError | ServerError

union PaginatedStageResult = PaginatedStage | InputError | ServerError

type PaginatedStage {
  count: Int!
  hasNext: Boolean!
  stages: [Stage!]!
}

input StageArgs {
  page: Int = 1
  take: Int = 10
  filter: StageFilterArgs
  orderBy: StageOrderArgs
}

input StageFilterArgs {
  id: Float
  activated: Boolean
  search: SearchrArgs
}

input StageOrderArgs {
  id: Sort
  name: Sort
  desc: Sort
  createdAt: Sort
  updatedAt: Sort
}

type Mutation {
  saveShipment(shipmentInput: ShipmentInput!): ShipmentResult!
  deleteShipment(id: Int!): ShipmentResult!
  saveDeliveryman(deliverymanInput: DeliverymanInput!): DeliverymanResult!
  deleteDeliveryman(id: Int!): DeliverymanResult!
  saveStage(stageInput: StageInput!): StageResult!
  deleteStage(id: Int!): StageResult!
}

input ShipmentInput {
  id: Float
  name: String
  desc: String
  activated: Boolean!
  date: DateTime!
  details: String
  categoryId: Float!
  stageId: Float!
  deliverymanId: Float!
}

input DeliverymanInput {
  id: Float
  name: String
  desc: String
  activated: Boolean!
  civility: String!
  firstname: String!
  lastname: String!
  email: String!
  phone: String!
}

input StageInput {
  id: Float
  name: String!
  desc: String
  activated: Boolean!
  nextStageId: Float!
}

scalar link__Import